////	Susy Grids ////
	//


//// Tutorial
	// LevelUpTuts - https://youtu.be/KYpqPZCzbwA?list=PLLnpHn493BHF-TxB5PqpKfJ_XjTwP5utB

//// Installing
	// http://susydocs.oddbird.net/en/latest/install/
	// Bower # command line This will add the Susy repository to your bower_components directory
	bower install susy --save

//// Using
	@import 'susy';

//// container(x)
	// To start using suzy we first need to define a container where we define a max-width
	// Values: Em's, Pixels, Percentages
	body {@include container(60em);}

//// span(x of x)
	// Allows us to choose the span of a element
	// we can vary the span
	// eg.g (1 of 2), (1 of 3), (8 of 16)
	main {@include span(8 of 12);}
	aside {@include span(4 of 12);}

	//	main {
	//		width: 66.1016949153%;
	//		float: left;
	//		margin-right: 1.6949152542%; }
	//	aside {
	//		width: 32.2033898305%;
	//		float: left;
	//		margin-right: 1.6949152542%; }

//// span(x at x of x)
	// Allow us to define the position of the element in the grid
	// When we use span(4 of 12) susy gives a margin right to the element making it collapse to the next line, as it doesn't know it's the last item
	aside {@include span(4 at 9 of 12);}
	

//// Settings
	// Uses a Sass map to allow us to define our gutter, how many columns we're using, our the math works our and the output styles
$susy: (
	// Because we already define our columns we don't need (of x) anymore, instead we can just say span(8)
	// main {@include span(8);}
	columns: 12,
	 // uses a ratio default .25
	gutters: 1/4,
	// by default applies margin just to the right but we can set it to 'before' (left) or 'split' on both sides or 'inside' which uses padding instead of margin
	gutter-position: inside,
	
	// etc, more in documentation
);

//// layout($x)
	// Allows us to create layouts over the default $suzy map
$widelayout: (
	columns: 24,
	gutters: 1/4,
	gutter-position: inside,
);
// We then need a way to tell suzy to use $widelayout
@include layout($widelayout);

//// with-layout(x)
	// Allows us to create temporary layouts by wrapping our code inside it
	@include with-layout(12) {
		body {@include container(80%);}
		main {@include span(8);}
		aside {@include span(4 at 9);}
	}

//// layout() Shorthand Syntax
	// Allows us to create a layout setting using the short syntax
	// Order: 1st span info, 2nd grid info, keywords anywhere
	@include layout(24 1/4 fluid float inside);

	// Standard 960px grid
	@include layout(12 (60px 10px) split static);
	body {@include container(960px);}

//// span() Shorthand Syntax
	// Allows us to essentially span a element with it's own grid
	main {@include span(8 at 0 of 24 1/8 fluid float);}
	aside {@include span(4 at 9);}

//// susy-breakpoint() 
	// acts as a shortcut for changing layout settings at different media-query breakpoints, using either susy-media or the third-party Breakpoint plugin.
	@include susy-breakpoint(500px) {
		body {@include container(80%);}
		main {@include span(8);}
		aside {@include span(4 at 9);}
	}
	// We can import a layout inside the breakpoint
	@include susy-breakpoint(1200px) {
		@include layout(24);
		body {@include container(80%);}
		main {@include span(8);}
		aside {@include span(4 at 9);}
	}
	// starting at a 30em min-width breakpoint... nested code uses an 8-column grid,
	@include susy-breakpoint(30em, 8) {
		.example {@include span(3);}
	}
	// or nested inside a class
	.example {
			@include susy-breakpoint(30em, 8) {
				@include span(3);
			}
	}
//// Susy Media 
	// The susy-media mixin provides basic media-query handling, and handles the built-in functionality for susy-breakpoint.
	// A single length will be used as a min-width
	@include susy-media(30em) { /*...*/ }
		// a property-value pair
		@include susy-media(min-height 30em) { /*...*/ }

	// Two lengths will become min- and max- width queries
	@include susy-media(30em 60em) { /*...*/ }

	// Map of pairs will become (property: value) queries, and a lonely string will be used directly. 
	@include susy-media((
		min-height: 30em,
		orientation: landscape,
	)) { /*...*/ }


//// Susy Toolkit
	// Are a collection of useful susy mixins

	// pad(), 
	// Applies padding on left, right
	// values: (25%), (10px), (10px 20px)
	aside {@include pad(25%);}

	// suffex()
	// applies padding on the left side
	aside {@include suffix(10px);}

	// pull()
	// Pull the element away from the grid (-margin)
	aside {@include pull(100px);}

	// bleed()
	// Creates a bleeding effect by applying padding with negative margin
	@include bleed(10px);
	// just horizontal
	@include bleed-x(10px);

	// The span function is identical to the span mixin, but returns only the span width value, so you can use it with custom output.
	aside {width: span(2);}

//// gallery()
	// Does all the math for a gallery
	.gallery img {
		@include gallery(6 of 12);
		@include susy-breakpoint($large) {
			@include gallery(3 of 12);
		}
	}